// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/y0ug/ai-helper/internal/ai (interfaces: AIClient,Provider,AIConversation)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=ai github.com/y0ug/ai-helper/internal/ai AIClient,Provider,AIConversation
//

// Package ai is a generated GoMock package.
package ai

import (
	reflect "reflect"

	config "github.com/y0ug/ai-helper/internal/config"
	gomock "go.uber.org/mock/gomock"
)

// MockAIClient is a mock of AIClient interface.
type MockAIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAIClientMockRecorder
	isgomock struct{}
}

// MockAIClientMockRecorder is the mock recorder for MockAIClient.
type MockAIClientMockRecorder struct {
	mock *MockAIClient
}

// NewMockAIClient creates a new mock instance.
func NewMockAIClient(ctrl *gomock.Controller) *MockAIClient {
	mock := &MockAIClient{ctrl: ctrl}
	mock.recorder = &MockAIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAIClient) EXPECT() *MockAIClientMockRecorder {
	return m.recorder
}

// GenerateWithMessages mocks base method.
func (m *MockAIClient) GenerateWithMessages(messages []Message, command string) (Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWithMessages", messages, command)
	ret0, _ := ret[0].(Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateWithMessages indicates an expected call of GenerateWithMessages.
func (mr *MockAIClientMockRecorder) GenerateWithMessages(messages, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWithMessages", reflect.TypeOf((*MockAIClient)(nil).GenerateWithMessages), messages, command)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GenerateResponse mocks base method.
func (m *MockProvider) GenerateResponse(messages []Message) (Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResponse", messages)
	ret0, _ := ret[0].(Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateResponse indicates an expected call of GenerateResponse.
func (mr *MockProviderMockRecorder) GenerateResponse(messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResponse", reflect.TypeOf((*MockProvider)(nil).GenerateResponse), messages)
}

// MockAIConversation is a mock of AIConversation interface.
type MockAIConversation struct {
	ctrl     *gomock.Controller
	recorder *MockAIConversationMockRecorder
	isgomock struct{}
}

// MockAIConversationMockRecorder is the mock recorder for MockAIConversation.
type MockAIConversationMockRecorder struct {
	mock *MockAIConversation
}

// NewMockAIConversation creates a new mock instance.
func NewMockAIConversation(ctrl *gomock.Controller) *MockAIConversation {
	mock := &MockAIConversation{ctrl: ctrl}
	mock.recorder = &MockAIConversationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAIConversation) EXPECT() *MockAIConversationMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockAIConversation) AddMessage(role, content string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMessage", role, content)
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockAIConversationMockRecorder) AddMessage(role, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockAIConversation)(nil).AddMessage), role, content)
}

// ApplyCommand mocks base method.
func (m *MockAIConversation) ApplyCommand(input string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyCommand", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyCommand indicates an expected call of ApplyCommand.
func (mr *MockAIConversationMockRecorder) ApplyCommand(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyCommand", reflect.TypeOf((*MockAIConversation)(nil).ApplyCommand), input)
}

// GetMessages mocks base method.
func (m *MockAIConversation) GetMessages() []Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages")
	ret0, _ := ret[0].([]Message)
	return ret0
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockAIConversationMockRecorder) GetMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockAIConversation)(nil).GetMessages))
}

// LoadCommand mocks base method.
func (m *MockAIConversation) LoadCommand(cmd *config.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCommand", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadCommand indicates an expected call of LoadCommand.
func (mr *MockAIConversationMockRecorder) LoadCommand(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCommand", reflect.TypeOf((*MockAIConversation)(nil).LoadCommand), cmd)
}

// Save mocks base method.
func (m *MockAIConversation) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAIConversationMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAIConversation)(nil).Save))
}

// SendRequest mocks base method.
func (m *MockAIConversation) SendRequest() (Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest")
	ret0, _ := ret[0].(Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockAIConversationMockRecorder) SendRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockAIConversation)(nil).SendRequest))
}
