// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/y0ug/ai-helper/pkg/llmclient (interfaces: Provider,AIClient,InfoProvider)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=llmclient github.com/y0ug/ai-helper/pkg/llmclient Provider,AIClient,InfoProvider
//

// Package llmclient is a generated GoMock package.
package llmclient

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GenerateResponse mocks base method.
func (m *MockProvider) GenerateResponse(messages []AIMessage) (AIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResponse", messages)
	ret0, _ := ret[0].(AIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateResponse indicates an expected call of GenerateResponse.
func (mr *MockProviderMockRecorder) GenerateResponse(messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResponse", reflect.TypeOf((*MockProvider)(nil).GenerateResponse), messages)
}

// Settings mocks base method.
func (m *MockProvider) Settings() AIModelSettings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Settings")
	ret0, _ := ret[0].(AIModelSettings)
	return ret0
}

// Settings indicates an expected call of Settings.
func (mr *MockProviderMockRecorder) Settings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settings", reflect.TypeOf((*MockProvider)(nil).Settings))
}

// MockAIClient is a mock of AIClient interface.
type MockAIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAIClientMockRecorder
	isgomock struct{}
}

// MockAIClientMockRecorder is the mock recorder for MockAIClient.
type MockAIClientMockRecorder struct {
	mock *MockAIClient
}

// NewMockAIClient creates a new mock instance.
func NewMockAIClient(ctrl *gomock.Controller) *MockAIClient {
	mock := &MockAIClient{ctrl: ctrl}
	mock.recorder = &MockAIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAIClient) EXPECT() *MockAIClientMockRecorder {
	return m.recorder
}

// GenerateWithMessages mocks base method.
func (m *MockAIClient) GenerateWithMessages(messages ...AIMessage) (AIResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateWithMessages", varargs...)
	ret0, _ := ret[0].(AIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateWithMessages indicates an expected call of GenerateWithMessages.
func (mr *MockAIClientMockRecorder) GenerateWithMessages(messages ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWithMessages", reflect.TypeOf((*MockAIClient)(nil).GenerateWithMessages), messages...)
}

// ProcessMessages mocks base method.
func (m *MockAIClient) ProcessMessages(toolHandlers map[string]ToolHandler, messages ...AIMessage) ([]AIMessage, []AIResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{toolHandlers}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessMessages", varargs...)
	ret0, _ := ret[0].([]AIMessage)
	ret1, _ := ret[1].([]AIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessMessages indicates an expected call of ProcessMessages.
func (mr *MockAIClientMockRecorder) ProcessMessages(toolHandlers any, messages ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{toolHandlers}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessages", reflect.TypeOf((*MockAIClient)(nil).ProcessMessages), varargs...)
}

// SetMaxTokens mocks base method.
func (m *MockAIClient) SetMaxTokens(maxTokens int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxTokens", maxTokens)
}

// SetMaxTokens indicates an expected call of SetMaxTokens.
func (mr *MockAIClientMockRecorder) SetMaxTokens(maxTokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxTokens", reflect.TypeOf((*MockAIClient)(nil).SetMaxTokens), maxTokens)
}

// SetTools mocks base method.
func (m *MockAIClient) SetTools(tools []AITools) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTools", tools)
}

// SetTools indicates an expected call of SetTools.
func (mr *MockAIClientMockRecorder) SetTools(tools any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTools", reflect.TypeOf((*MockAIClient)(nil).SetTools), tools)
}

// MockInfoProvider is a mock of InfoProvider interface.
type MockInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockInfoProviderMockRecorder
	isgomock struct{}
}

// MockInfoProviderMockRecorder is the mock recorder for MockInfoProvider.
type MockInfoProviderMockRecorder struct {
	mock *MockInfoProvider
}

// NewMockInfoProvider creates a new mock instance.
func NewMockInfoProvider(ctrl *gomock.Controller) *MockInfoProvider {
	mock := &MockInfoProvider{ctrl: ctrl}
	mock.recorder = &MockInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoProvider) EXPECT() *MockInfoProviderMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockInfoProvider) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockInfoProviderMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockInfoProvider)(nil).Clear))
}

// GetModelInfo mocks base method.
func (m *MockInfoProvider) GetModelInfo(modelName string) (*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInfo", modelName)
	ret0, _ := ret[0].(*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfo indicates an expected call of GetModelInfo.
func (mr *MockInfoProviderMockRecorder) GetModelInfo(modelName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfo", reflect.TypeOf((*MockInfoProvider)(nil).GetModelInfo), modelName)
}

// Load mocks base method.
func (m *MockInfoProvider) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockInfoProviderMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockInfoProvider)(nil).Load))
}
